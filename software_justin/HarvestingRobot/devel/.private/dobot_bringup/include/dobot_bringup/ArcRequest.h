// Generated by gencpp from file dobot_bringup/ArcRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_BRINGUP_MESSAGE_ARCREQUEST_H
#define DOBOT_BRINGUP_MESSAGE_ARCREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot_bringup
{
template <class ContainerAllocator>
struct ArcRequest_
{
  typedef ArcRequest_<ContainerAllocator> Type;

  ArcRequest_()
    : x1(0.0)
    , y1(0.0)
    , z1(0.0)
    , a1(0.0)
    , b1(0.0)
    , c1(0.0)
    , x2(0.0)
    , y2(0.0)
    , z2(0.0)
    , a2(0.0)
    , b2(0.0)
    , c2(0.0)
    , paramValue()  {
    }
  ArcRequest_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , z1(0.0)
    , a1(0.0)
    , b1(0.0)
    , c1(0.0)
    , x2(0.0)
    , y2(0.0)
    , z2(0.0)
    , a2(0.0)
    , b2(0.0)
    , c2(0.0)
    , paramValue(_alloc)  {
  (void)_alloc;
    }



   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _z1_type;
  _z1_type z1;

   typedef double _a1_type;
  _a1_type a1;

   typedef double _b1_type;
  _b1_type b1;

   typedef double _c1_type;
  _c1_type c1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;

   typedef double _z2_type;
  _z2_type z2;

   typedef double _a2_type;
  _a2_type a2;

   typedef double _b2_type;
  _b2_type b2;

   typedef double _c2_type;
  _c2_type c2;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _paramValue_type;
  _paramValue_type paramValue;





  typedef boost::shared_ptr< ::dobot_bringup::ArcRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot_bringup::ArcRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ArcRequest_

typedef ::dobot_bringup::ArcRequest_<std::allocator<void> > ArcRequest;

typedef boost::shared_ptr< ::dobot_bringup::ArcRequest > ArcRequestPtr;
typedef boost::shared_ptr< ::dobot_bringup::ArcRequest const> ArcRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot_bringup::ArcRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot_bringup::ArcRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot_bringup::ArcRequest_<ContainerAllocator1> & lhs, const ::dobot_bringup::ArcRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.z1 == rhs.z1 &&
    lhs.a1 == rhs.a1 &&
    lhs.b1 == rhs.b1 &&
    lhs.c1 == rhs.c1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.z2 == rhs.z2 &&
    lhs.a2 == rhs.a2 &&
    lhs.b2 == rhs.b2 &&
    lhs.c2 == rhs.c2 &&
    lhs.paramValue == rhs.paramValue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot_bringup::ArcRequest_<ContainerAllocator1> & lhs, const ::dobot_bringup::ArcRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::ArcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::ArcRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::ArcRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36cdf2760ebf4d3260d1c998b1e027d1";
  }

  static const char* value(const ::dobot_bringup::ArcRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36cdf2760ebf4d32ULL;
  static const uint64_t static_value2 = 0x60d1c998b1e027d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot_bringup/ArcRequest";
  }

  static const char* value(const ::dobot_bringup::ArcRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x1\n"
"float64 y1\n"
"float64 z1\n"
"float64 a1\n"
"float64 b1\n"
"float64 c1\n"
"\n"
"float64 x2\n"
"float64 y2\n"
"float64 z2\n"
"float64 a2\n"
"float64 b2\n"
"float64 c2\n"
"string[] paramValue\n"
;
  }

  static const char* value(const ::dobot_bringup::ArcRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.z1);
      stream.next(m.a1);
      stream.next(m.b1);
      stream.next(m.c1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.z2);
      stream.next(m.a2);
      stream.next(m.b2);
      stream.next(m.c2);
      stream.next(m.paramValue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArcRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot_bringup::ArcRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot_bringup::ArcRequest_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "z1: ";
    Printer<double>::stream(s, indent + "  ", v.z1);
    s << indent << "a1: ";
    Printer<double>::stream(s, indent + "  ", v.a1);
    s << indent << "b1: ";
    Printer<double>::stream(s, indent + "  ", v.b1);
    s << indent << "c1: ";
    Printer<double>::stream(s, indent + "  ", v.c1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
    s << indent << "z2: ";
    Printer<double>::stream(s, indent + "  ", v.z2);
    s << indent << "a2: ";
    Printer<double>::stream(s, indent + "  ", v.a2);
    s << indent << "b2: ";
    Printer<double>::stream(s, indent + "  ", v.b2);
    s << indent << "c2: ";
    Printer<double>::stream(s, indent + "  ", v.c2);
    s << indent << "paramValue[]" << std::endl;
    for (size_t i = 0; i < v.paramValue.size(); ++i)
    {
      s << indent << "  paramValue[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.paramValue[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_BRINGUP_MESSAGE_ARCREQUEST_H
