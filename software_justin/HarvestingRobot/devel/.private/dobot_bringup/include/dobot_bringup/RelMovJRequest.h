// Generated by gencpp from file dobot_bringup/RelMovJRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_BRINGUP_MESSAGE_RELMOVJREQUEST_H
#define DOBOT_BRINGUP_MESSAGE_RELMOVJREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot_bringup
{
template <class ContainerAllocator>
struct RelMovJRequest_
{
  typedef RelMovJRequest_<ContainerAllocator> Type;

  RelMovJRequest_()
    : offset1(0.0)
    , offset2(0.0)
    , offset3(0.0)
    , offset4(0.0)
    , offset5(0.0)
    , offset6(0.0)  {
    }
  RelMovJRequest_(const ContainerAllocator& _alloc)
    : offset1(0.0)
    , offset2(0.0)
    , offset3(0.0)
    , offset4(0.0)
    , offset5(0.0)
    , offset6(0.0)  {
  (void)_alloc;
    }



   typedef double _offset1_type;
  _offset1_type offset1;

   typedef double _offset2_type;
  _offset2_type offset2;

   typedef double _offset3_type;
  _offset3_type offset3;

   typedef double _offset4_type;
  _offset4_type offset4;

   typedef double _offset5_type;
  _offset5_type offset5;

   typedef double _offset6_type;
  _offset6_type offset6;





  typedef boost::shared_ptr< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RelMovJRequest_

typedef ::dobot_bringup::RelMovJRequest_<std::allocator<void> > RelMovJRequest;

typedef boost::shared_ptr< ::dobot_bringup::RelMovJRequest > RelMovJRequestPtr;
typedef boost::shared_ptr< ::dobot_bringup::RelMovJRequest const> RelMovJRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot_bringup::RelMovJRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot_bringup::RelMovJRequest_<ContainerAllocator1> & lhs, const ::dobot_bringup::RelMovJRequest_<ContainerAllocator2> & rhs)
{
  return lhs.offset1 == rhs.offset1 &&
    lhs.offset2 == rhs.offset2 &&
    lhs.offset3 == rhs.offset3 &&
    lhs.offset4 == rhs.offset4 &&
    lhs.offset5 == rhs.offset5 &&
    lhs.offset6 == rhs.offset6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot_bringup::RelMovJRequest_<ContainerAllocator1> & lhs, const ::dobot_bringup::RelMovJRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c79e26b547a79cd3d85664927a137ccb";
  }

  static const char* value(const ::dobot_bringup::RelMovJRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc79e26b547a79cd3ULL;
  static const uint64_t static_value2 = 0xd85664927a137ccbULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot_bringup/RelMovJRequest";
  }

  static const char* value(const ::dobot_bringup::RelMovJRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 offset1\n"
"float64 offset2\n"
"float64 offset3\n"
"float64 offset4\n"
"float64 offset5\n"
"float64 offset6\n"
;
  }

  static const char* value(const ::dobot_bringup::RelMovJRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offset1);
      stream.next(m.offset2);
      stream.next(m.offset3);
      stream.next(m.offset4);
      stream.next(m.offset5);
      stream.next(m.offset6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelMovJRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot_bringup::RelMovJRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot_bringup::RelMovJRequest_<ContainerAllocator>& v)
  {
    s << indent << "offset1: ";
    Printer<double>::stream(s, indent + "  ", v.offset1);
    s << indent << "offset2: ";
    Printer<double>::stream(s, indent + "  ", v.offset2);
    s << indent << "offset3: ";
    Printer<double>::stream(s, indent + "  ", v.offset3);
    s << indent << "offset4: ";
    Printer<double>::stream(s, indent + "  ", v.offset4);
    s << indent << "offset5: ";
    Printer<double>::stream(s, indent + "  ", v.offset5);
    s << indent << "offset6: ";
    Printer<double>::stream(s, indent + "  ", v.offset6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_BRINGUP_MESSAGE_RELMOVJREQUEST_H
