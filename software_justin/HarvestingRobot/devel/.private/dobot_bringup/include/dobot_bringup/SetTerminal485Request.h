// Generated by gencpp from file dobot_bringup/SetTerminal485Request.msg
// DO NOT EDIT!


#ifndef DOBOT_BRINGUP_MESSAGE_SETTERMINAL485REQUEST_H
#define DOBOT_BRINGUP_MESSAGE_SETTERMINAL485REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot_bringup
{
template <class ContainerAllocator>
struct SetTerminal485Request_
{
  typedef SetTerminal485Request_<ContainerAllocator> Type;

  SetTerminal485Request_()
    : baudRate(0)
    , dataLen(0)
    , parityBit()
    , stopBit(0)  {
    }
  SetTerminal485Request_(const ContainerAllocator& _alloc)
    : baudRate(0)
    , dataLen(0)
    , parityBit(_alloc)
    , stopBit(0)  {
  (void)_alloc;
    }



   typedef int32_t _baudRate_type;
  _baudRate_type baudRate;

   typedef int32_t _dataLen_type;
  _dataLen_type dataLen;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _parityBit_type;
  _parityBit_type parityBit;

   typedef int32_t _stopBit_type;
  _stopBit_type stopBit;





  typedef boost::shared_ptr< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> const> ConstPtr;

}; // struct SetTerminal485Request_

typedef ::dobot_bringup::SetTerminal485Request_<std::allocator<void> > SetTerminal485Request;

typedef boost::shared_ptr< ::dobot_bringup::SetTerminal485Request > SetTerminal485RequestPtr;
typedef boost::shared_ptr< ::dobot_bringup::SetTerminal485Request const> SetTerminal485RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator1> & lhs, const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator2> & rhs)
{
  return lhs.baudRate == rhs.baudRate &&
    lhs.dataLen == rhs.dataLen &&
    lhs.parityBit == rhs.parityBit &&
    lhs.stopBit == rhs.stopBit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator1> & lhs, const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cee793cb6052d5ff291b0828ddbf525";
  }

  static const char* value(const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cee793cb6052d5fULL;
  static const uint64_t static_value2 = 0xf291b0828ddbf525ULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot_bringup/SetTerminal485Request";
  }

  static const char* value(const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 baudRate\n"
"int32 dataLen\n"
"string parityBit\n"
"int32 stopBit\n"
;
  }

  static const char* value(const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.baudRate);
      stream.next(m.dataLen);
      stream.next(m.parityBit);
      stream.next(m.stopBit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTerminal485Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot_bringup::SetTerminal485Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot_bringup::SetTerminal485Request_<ContainerAllocator>& v)
  {
    s << indent << "baudRate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.baudRate);
    s << indent << "dataLen: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dataLen);
    s << indent << "parityBit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.parityBit);
    s << indent << "stopBit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stopBit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_BRINGUP_MESSAGE_SETTERMINAL485REQUEST_H
