// Generated by gencpp from file dobot_bringup/GetInBitsRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_BRINGUP_MESSAGE_GETINBITSREQUEST_H
#define DOBOT_BRINGUP_MESSAGE_GETINBITSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot_bringup
{
template <class ContainerAllocator>
struct GetInBitsRequest_
{
  typedef GetInBitsRequest_<ContainerAllocator> Type;

  GetInBitsRequest_()
    : index(0)
    , addr(0)
    , count(0)  {
    }
  GetInBitsRequest_(const ContainerAllocator& _alloc)
    : index(0)
    , addr(0)
    , count(0)  {
  (void)_alloc;
    }



   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _addr_type;
  _addr_type addr;

   typedef int32_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetInBitsRequest_

typedef ::dobot_bringup::GetInBitsRequest_<std::allocator<void> > GetInBitsRequest;

typedef boost::shared_ptr< ::dobot_bringup::GetInBitsRequest > GetInBitsRequestPtr;
typedef boost::shared_ptr< ::dobot_bringup::GetInBitsRequest const> GetInBitsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator1> & lhs, const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.addr == rhs.addr &&
    lhs.count == rhs.count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator1> & lhs, const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0486de335a53c6fe169582c18327a366";
  }

  static const char* value(const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0486de335a53c6feULL;
  static const uint64_t static_value2 = 0x169582c18327a366ULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot_bringup/GetInBitsRequest";
  }

  static const char* value(const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index\n"
"int32 addr\n"
"int32 count\n"
;
  }

  static const char* value(const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.addr);
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetInBitsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot_bringup::GetInBitsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot_bringup::GetInBitsRequest_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "addr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.addr);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_BRINGUP_MESSAGE_GETINBITSREQUEST_H
